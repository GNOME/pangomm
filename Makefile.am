if GTKMM_ATKMM_ENABLED
  ATK_SUBDIR=atk
else
  ATK_SUBDIR=
endif

SUBDIRS		= tools $(ATK_SUBDIR) pango gdk gtk @DEMO_SUBDIR@ @DOCS_SUBDIR@ tests MSVC_Net2003
DIST_SUBDIRS	= $(SUBDIRS) scripts

EXTRA_DIST	= build_shared/Makefile_build.am_fragment \
		  build_shared/Makefile_build_gensrc.am_fragment \
		  build_shared/Makefile_gensrc.am_fragment \
		  build_shared/Makefile_conditional.am_fragment \
		  CHANGES README.win32 README.SUN PORTING \
      autogen.sh


all-local:
	@echo "*** Everything completed ***"

dist-hook:
	@echo; echo; \
	echo "**********************************************************"; \
	echo "* IMPORTANT NOTICE:                                      *"; \
	echo "*                                                        *"; \
	echo "* Be sure you have done a complete build before running  *"; \
	echo "* 'make dist' or 'make distcheck', because otherwise     *"; \
	echo "* the tarball will _not_ contain the dependency rules    *"; \
	echo "* generated by the compiler.                             *"; \
	echo "**********************************************************"; \
	echo; echo


include $(top_srcdir)/docs/Makefile_web.am_fragment

doc_tarball_files = \
	docs/index.html docs/FAQ/html docs/images/*.gif \
	docs/reference/html \
	docs/tutorial/figures/*.png docs/tutorial/html

# This doesn't work very well in a $(srcdir) != $(builddir) setup,
# but this target is for maintainer use only anyway.

gtkmm-2-4-docs.tar.gz:
	tar cf - --files-from - $(doc_tarball_files) | gzip -c --best >$@

# Upload documentation:

post-html-recursive:
	list='docs'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) post-html); \
	done

post-html-local: gtkmm-2-4-docs.tar.gz
	rsync $(rsync_args) gtkmm-2-4-docs.tar.gz $$USER@$(web_host):$(web_path_gtkmm)

post-html: post-html-recursive post-html-local

doc-clean-recursive:
	(cd docs && $(MAKE) $(AM_MAKEFLAGS) doc-clean)

doc-clean: doc-clean-recursive

doc-rebuild:
	(cd docs && $(MAKE) $(AM_MAKEFLAGS) doc-rebuild)

SVN_REV=`svnversion -n`
URL_KEY=URL:
SVN_PATH=`svn info |grep "$(URL_KEY)" |sed -e "s/$(URL_KEY)\s*//"`
ROOT_KEY=Repository Root:
SVN_ROOT=`svn info |grep "$(ROOT_KEY)" |sed -e "s/$(ROOT_KEY)\s*//"`

tag-release: distcheck
	@svn cp -r$(SVN_REV) -m "tag $(PACKAGE) $(VERSION)" $(SVN_PATH) $(SVN_ROOT)/tags/$(PACKAGE)-$(VERSION) \
		|| (echo "Tagging failed.  Do you have local changes that are not committed?" \
		&& echo "Try running `svn update`." && false)
	@echo "Release Tagged."

release: tag-release
	scp $(DIST_ARCHIVES) master.gnome.org:
	@echo "Tarball uploaded.  Now run install-module on master.gnome.org"

.PHONY: post-html post-html-local post-html-recursive doc-clean doc-clean-recursive doc-rebuild release tag-release

