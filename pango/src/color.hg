/* Copyright (C) 2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

_CONFIGINCLUDE(pangommconfig.h)

#include <glibmm/value.h>
#include <glibmm/utility.h>
#include <pango/pango.h>
#include <utility> // std::pair

_DEFS(pangomm,pango)

namespace Pango
{

/** A Pango::Color is used to represent a color in an uncalibrated RGB colorspace.
 */
class PANGOMM_API Color
{
  _CLASS_BOXEDTYPE_STATIC(Color, PangoColor, PANGOMM_API)
  _IGNORE(pango_color_copy, pango_color_free)

public:

  /// Tests whether the Color is valid.
  explicit operator bool() const;
  
  /** Gets the red component of the color.
   * @return The red component of the color. This is a value between 0 and 65535, with 65535 indicating full intensity.
   */
  _MEMBER_GET(red, red, guint16, guint16)

  /** Gets the green component of the color.
   * @return The green component of the color. This is a value between 0 and 65535, with 65535 indicating full intensity.
   */
  _MEMBER_GET(green, green, guint16, guint16)

  /** Gets the blue component of the color.
   * @return The blue component of the color. This is a value between 0 and 65535, with 65535 indicating full intensity.
   */
  _MEMBER_GET(blue, blue, guint16, guint16)

  /** Sets the red component of the color.
   * @param value The red component of the color. This is a value between 0 and 65535, with 65535 indicating full intensity.
   */
  _MEMBER_SET(red, red, guint16, guint16)

  /** Sets the green component of the color.
   * @param value The green component of the color. This is a value between 0 and 65535, with 65535 indicating full intensity.
   */
  _MEMBER_SET(green, green, guint16, guint16)

  /** Sets the blue component of the color.
   * @param value The blue component of the color. This is a value between 0 and 65535, with 65535 indicating full intensity.
   */
  _MEMBER_SET(blue, blue, guint16, guint16)

  _WRAP_METHOD(bool parse(const Glib::ustring& spec), pango_color_parse)

  /** Fill in the fields of a color from a string specification.
   *
   * The string can either one of a large set of standard names.
   * (Taken from the CSS Color [specification](https://www.w3.org/TR/css-color-4/#named-colors),
   * or it can be a hexadecimal value in the form `#rgb`,
   * `#rrggbb`, `#rrrgggbbb` or `#rrrrggggbbbb` where `r`, `g`
   * and `b` are hex digits of the red, green, and blue components
   * of the color, respectively. (White in the four forms is
   * `#fff`, `#ffffff`, `#fffffffff` and `#ffffffffffff`.)
   *
   * Additionally, parse strings of the form `#rgba`, `#rrggbbaa`,
   * `#rrrrggggbbbbaaaa`, and set @a alpha
   * to the value specified by the hex digits for `a`. If no alpha
   * component is found in @a spec, @a alpha is set to 0xffff (for a
   * solid color).
   *
   * @newin{2,54}
   *
   * @param spec A string specifying the new color.
   * @return {success, alpha} <tt>true</tt> if parsing of the specifier succeeded,
   * otherwise <tt>false</tt>; alpha value.
   */
  std::pair<bool, guint16> parse_with_alpha(const Glib::ustring& spec);
  _IGNORE(pango_color_parse_with_alpha)

  _WRAP_METHOD(Glib::ustring to_string() const, pango_color_to_string)
};

} /* namespace Pango */
