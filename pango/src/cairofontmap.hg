/* fontmap.h
 *
 * Copyright 2001      The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

_CONFIGINCLUDE(pangommconfig.h)

#include <glibmm/interface.h>
#include <pangomm/fontmap.h>
#include <cairomm/enums.h>
#include <pango/pangocairo.h>

_DEFS(pangomm,pango)
_PINCLUDE(glibmm/private/interface_p.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _PangoCairoFontMapIface PangoCairoFontMapIface;
#endif

namespace Pango
{

/** %Pango::CairoFontMap is an interface implemented by font maps for use with Cairo.
 *
 * The actual type of the font map will depend on the particular
 * font technology Cairo was compiled to use.
 */
class PANGOMM_API CairoFontMap : public Glib::Interface
{
   _CLASS_INTERFACE(CairoFontMap, PangoCairoFontMap, PANGO_CAIRO_FONT_MAP, PangoCairoFontMapIface, , , PANGOMM_API)

public:
  /** Gets a default %Pango::CairoFontMap to use with Cairo.
   *
   * Note that the type of the returned object will depend
   * on the particular font backend Cairo was compiled to use.
   * You generally should only use the Pango::FontMap and
   * %Pango::CairoFontMap API on the returned object.
   *
   * The default Cairo fontmap can be changed by using
   * set_default(). This can be used to change the Cairo font backend
   * that the default fontmap uses for example.
   *
   * Note that since %Pango 1.32.6, the default fontmap is per-thread.
   * Each thread gets its own default fontmap. In this way,
   * PangoCairo can be used safely from multiple threads.
   *
   * To use %Pango::CairoFontMap API, do something like
   * @code
   * auto font_map = Pango::CairoFontMap::get_default();
   * auto cairo_font_map = std::dynamic_pointer_cast<Pango::CairoFontMap>(font_map);
   * if (cairo_font_map)
   *   cairo_font_map->do_something();
   * @endcode
   *
   * @newin{1,10}
   *
   * @return The default PangoCairo fontmap for the current thread.
   */
  _WRAP_METHOD(static Glib::RefPtr<FontMap> get_default(), pango_cairo_font_map_get_default, refreturn)

  _WRAP_METHOD(void set_default(), pango_cairo_font_map_set_default)

#m4 _CONVERSION(`cairo_font_type_t',`Cairo::FontType',`static_cast<Cairo::FontType>($3)')
  _WRAP_METHOD(Cairo::FontType get_font_type() const, pango_cairo_font_map_get_font_type)

  _WRAP_METHOD(void set_resolution(double dpi), pango_cairo_font_map_set_resolution)
  _WRAP_METHOD(double get_resolution() const, pango_cairo_font_map_get_resolution)
  _IGNORE(pango_cairo_font_map_create_context)dnl// deprecated
};

} // namespace Pango
